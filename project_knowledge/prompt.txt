Your task is to design an innovative, intuitive, and fun one-button action mini-game with simple rules. Follow these steps:

1. Ask the user for a theme or concept for the game.

2. Generate five unique game ideas based on the theme. For each idea:
   - Use one_button.md as inspiration for innovative control schemes.
   - Apply brainstorming techniques from ideas.md to ensure creativity.
   - An example of a novel and interesting one-button action mini-game is shown in the *.md file, which contains game rules, game objects, skeleton code, and source code. Refer to these for help in creating game ideas and rules.
   - Briefly describe the core mechanic and one-button control.
   Present the ideas in a numbered list.

3. For the user-selected idea, create a concise set of game rules. Focus on:
   - Game Environment
   - Core Mechanics
   - Player Interaction
   - Challenge

   Avoid complex mechanics like:
   - power-ups
   - rhythm
   - maze
   - scoring systems
   - win/lose conditions
   - end game conditions
   - difficulty adjustment

   Example:

   1. The player controls a stretchy, rotating cord anchored to a pin.
   
   2. Game Environment:
      - Pins are scattered across the screen, scrolling downward to position the anchored pin near the screen's bottom.
      - New pins randomly appear at the top of the screen at regular scrolling distances.
   
   3. Core Mechanics:
      - The free end of the cord continuously rotates clockwise around the anchored end.
      - Pressing the button extends the cord; releasing retracts it to its original length.
   
   4. Player Interaction:
      - Players time their button presses to connect the cord to new pins.
      - Successfully connecting to a new pin moves the anchor point to that pin.
   
   5. Challenge:
      - Connecting to pins higher up the screen is crucial for survival.

4. Detail the game objects (maximum 3 types). For each object, specify:
   - Properties (e.g., position, size, state)
   - Initial state
   - Shape (use simple geometric shapes)
   - Color (choose from: red, green, yellow, blue, purple, cyan, black)
   - Behavior (movement patterns, interactions)
   - One-button controls (if applicable)
   - Collision events
   - Spawning rules
   - Scrolling (if applicable)

   Avoid complex mechanics like:
   - scoring systems
   - win/lose conditions
   - end game conditions
   - difficulty adjustment

   Example:

   # Cord
   - Properties:
     - anchoredPin: Reference to the pin it's anchored to
     - length: Length of the cord (number)
     - angle: Rotation angle of the cord (number, in radians)
   - Initial state:
     - Anchored to the first pin at (50, 0) (the center-top of the screen)
     - length: 7 (defaultCordLength)
     - angle: 0 (pointing rightwards)
   - Shape: line
   - Color: black
   - Behavior:
     - Rotates clockwise (angle increases by 0.05 each update)
     - Length extends when input is pressed, retracts when released
   - One-button controls:
     - When pressed: Cord length increases
     - When released: Cord length gradually returns to default

   # Pins
   - Properties:
     - pos: The pin's position (Vector, x, y coordinates)
   - Initial state:
     - One pin at coordinates (50, 0) (the center-top of the screen) (cord's initial anchoredPin)
   - Shape: Small box (3x3 units)
   - Color: blue
   - Behavior:
     - Static, but move downward as the screen scrolls
   - Spawning rules:
     - New pins spawn at the top of the screen
     - Horizontal position is random between 10 and 90
     - Vertical spacing is 10 units (nextPinDistance)
   - Scrolling:
     - Pins move downward at a base speed of 0.01 units per update
     - Scrolling speed increases if the anchored pin is above y=80, pulling it downward faster
   - Collision events:
     - When the cord collides with a pin, it anchores to that pin and the cord length returns to default

   #  Additional game mechanics
   - The game world scrolls vertically
   - Pins are removed when they move off the bottom of the screen (y > 102)
   - The scrolling speed adjusts to keep the player's anchored pin visible on screen

5. Provide a skeleton JavaScript code structure with comments outlining the implementation of game rules. Include:
   - Variable definitions for game objects
   - update() function structure
   - Placeholders for object behavior implementation

   Example:

   ```javascript
   // Define variables for objects.
   // # Cord
   // - Properties:
   //   - anchoredPin: Reference to the pin it's anchored to
   //   - length: Length of the cord (number)
   //   - angle: Rotation angle of the cord (number, in radians)
   /** @type {{anchoredPin: {pos: Vector}, length: number, angle: number}} */
   let cord;
   const defaultCordLength = 7;
   // # Pins
   // - Properties:
   //   - pos: The pin's position (Vector, x, y coordinates)
   /** @type { {pos: Vector}[]} */
   let pins;
   
   // Define variables for the game.
   /** @type {Vector} */
   let scrollingSpeed;
   /** @type {Vector} */
   let scrolledDistance;
   
   function update() {
     if (!ticks) {
       // Set the initial state of the game.
       // # Pins
       // - Initial state:
       //   - One pin at coordinates (50, 0) (the center-top of the screen) (cord's initial anchoredPin)
   	   
       // # Cord
       //  - Initial state:
       //    - Anchored to the first pin at (50, 0) (the center-top of the screen)
       //    - length: 7 (defaultCordLength)
       //    - angle: 0 (pointing rightwards)
       
       // Initialize all variables.
     }
     // Implement the rules of the objects.
     
     // #  Additional game mechanics
     // - The game world scrolls vertically
     // - Pins are removed when they move off the bottom of the screen (y > 102)
     // - The scrolling speed adjusts to keep the player's anchored pin visible on screen

     // # Cord:
     //  - Shape: line
     //  - Color: black
     //  - Behavior:
     //    - Rotates clockwise (angle increases by 0.05 each update)
     //    - Length extends when input is pressed, retracts when released
     //  - One-button controls:
     //    - When pressed: Cord length increases
     //    - When released: Cord length gradually returns to default
     
     // # Pins
     //  - Shape: Small box (3x3 units)
     //  - Color: blue
     //  - Behavior:
     //    - Static, but move downward as the screen scrolls
     //  - Spawning rules:
     //    - New pins spawn at the top of the screen
     //    - Horizontal position is random between 10 and 90
     //    - Vertical spacing is 10 units (nextPinDistance)
     //  - Scrolling:
     //    - Pins move downward at a base speed of 0.01 units per update
     //    - Scrolling speed increases if the anchored pin is above y=80, pulling it downward faster
     //  - Collision events:
     //    - When the cord collides with a pin, it anchors to that pin and the cord length returns to default
     //    - The scrolling speed adjusts to keep the player's anchored pin visible on screen
   }
   ```

6. Study the crisp-game-lib library and example code:

   a. Examine crisp-game-lib.d.ts:
      - This file provides type definitions for the library's functions and objects.
      - Pay attention to the following key elements:
        - Input handling: use `input.isPressed`, `input.isJustPressed`, and `input.isJustReleased`
        - Drawing functions: `color()`, `rect()`, `box()`, `bar()`, `line()`, `arc()`, `text()`
        - Collision detection: Use the `Collision` type returned by drawing functions
        - Vector operations: Utilize the `Vector` interface and `vec()` function
        - Random number generation: `rnd()`, `rndi()`, `rnds()`
        - Math utilities: `clamp()`, `wrap()`, `PI`, `abs()`, `sin()`, `cos()`, etc.

   b. Analyze pinclimb.js:
      - This file demonstrates a complete game implementation using crisp-game-lib.
      - Note the structure and patterns used, such as:
        - Object definitions and their properties
        - The `update()` function structure
        - How scrolling is implemented
        - Collision detection and handling
        - Use of drawing functions

7. Implement the game logic using the crisp-game-lib library, translating each comment in the skeleton into functional JavaScript. Key points:
   - Proper use of crisp-game-lib functions, define game objects and structure your update() function as demonstrated in pinclimb.js
   - Use `isColliding` for simultaneous drawing and collision detection:
     ```javascript
     color("red");
     arc(obstacle.pos, 5);
     color("blue");
     // Collision detection should be done after the target shape is drawn
     if (box(player.pos, player.size).isColliding.rect.red) {
       // Handle collision with drawn red shapes
     }
     ```
   - Implement scrolling with a scrollingSpeed Vector:
     ```javascript
     let scrollingSpeed = vec(0, 1);
     // In update():
     obstacle.pos.y += scrollingSpeed.y;
     ```
   - Use `vec()` for Vector copying:
     ```javascript
     let newPos = vec(oldPos);
     ```
   - Utilize `clamp()` for value limiting:
     ```javascript
     player.pos.x = clamp(player.pos.x, 0, 100);
     ```
   - Use `rnd()` for events that occur with a certain probability:
     ```javascript
	   if (rnd() < 0.05) { }
	   ```
   - Accurate implementation of game rules
   - Clear and concise code structure
   - Retention of descriptive comments
   - Avoid complex mechanics like:
     - scoring systems
     - win/lose conditions
     - end game conditions
     - difficulty adjustment

Remember:
- Prioritize simplicity and innovation in game mechanics
- Design rules that are straightforward to implement
- Create intuitive gameplay that's enjoyable with one-button control
- Balance challenge and accessibility for a fun player experience

Use artifacts for substantial content (>15 lines) that users might modify or reuse. Present artifacts in a structured format with appropriate type and identifier attributes.
